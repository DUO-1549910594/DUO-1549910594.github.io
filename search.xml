<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言的基本概念</title>
      <link href="2021/05/30/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2021/05/30/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h3><p>在ANSI C的任何一种实现中，存在两种不同的环境：翻译环境，执行环境。<br>翻译环境：源代码被转换为可执行的机器指令。执行环境：用于实际执行代码。这两种环境不必位于同一台机器上。</p><h4 id="1-1-翻译"><a href="#1-1-翻译" class="headerlink" title="1.1 翻译"></a>1.1 翻译</h4><p>翻译：组成程序的源文件（一个或者多个）通过编译转换为<strong>目标代码</strong>，然后各个目标文件由<strong>链接器</strong>捆绑在一起，形成单一而完整的可执行程序。连接器同时会引入标准C函数库中任何被该程序所用到的函数，而且它也可以搜索程序员个人的程序库，将其中需要使用的函数也链接带程序中。<br>如图：</p><p><img src="images/%E4%B8%89%E5%AD%97%E6%AF%8D%E8%AF%8D.png" alt="编译过程"></p><p>一.文件名约定<br>大多数环境都存在必须遵守的文件名约定。C源代码通常保存于以.c扩展名的文件中，头文件则为.h。目标文件名在不同环境可能有不同的约定：UNIX系统中扩展名为.o，在MS-DOS系统中扩展名为.obj。<br>二.编译和链接</p><p>用于编译和链接C程序的特定命令在不同的系统中各不相同</p><p>在绝大多数的UNIX系统中，C编译器被称为cc，它可以用不同的方法来调用；</p><ol><li><p>编译并链接一个完全包含于一个源文件的C程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc program.c</span><br></pre></td></tr></table></figure><p>命令执行完之后会产生一个a.out的可执行文件（中间会产生一个名为program.o的目标文件，但是在链接过程完成后会被删除）</p></li><li><p>编译并链接几个C源文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc main.c sort.c lookup.c</span><br></pre></td></tr></table></figure></li><li><p>编译一个C源文件，并把它和现存的目标文件链接在一起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc main.o lookup.o sort.c</span><br></pre></td></tr></table></figure></li><li><p>编译单个C源文件，并产生一个目标文件，以后再进行链接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -c program.c</span><br></pre></td></tr></table></figure></li><li><p>编译几个C源文件，并为每个文件产生一个目标文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -c main.v sort.c lookup.c</span><br></pre></td></tr></table></figure></li><li><p>链接一个目标文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc main.o sort.o lookup.o</span><br></pre></td></tr></table></figure></li></ol><p>在产生可执行文件的命令均可以加上</p><p>​    “-o name” :  使编译器把可执行程序保存在“name”文件里</p><h4 id="1-2执行"><a href="#1-2执行" class="headerlink" title="1.2执行"></a>1.2执行</h4><p>程序的执行也需要经历几个阶段：</p><ol><li>程序载入到内存中（在宿主环境中，由操作系统执行；独立环境中需要手工安排）</li><li>在操作系统中，通常一个小型的<strong>启动程序</strong>与程序链接在一起，调用main函数（它负责处理一系列日常事务，如：收集命名行参数以便程序访问）</li><li>执行程序代码。（在绝大多数的机器里，程序将使用一个运行时<strong>堆栈</strong>，它用于存储函数的局部变量和返回地址。程序同时也可以使用<strong>静态内存</strong>，存储于静态内存中的变量在程序的整个执行过程中将一直保留它们的值。）</li><li>程序的终止。终止有如下情况：main函数返回；启动程序关闭可能使用过但并未显示关闭的文件；用户按下break键；执行过程中出现错误而中断。</li></ol><h3 id="2-词法规则"><a href="#2-词法规则" class="headerlink" title="2.词法规则"></a>2.词法规则</h3><p>一个ANSI C程序由声明和函数组成。函数定义了需要执行的工作，而声明则描述了函数和函数将要操作的数据类型，注释可以散布于源文件的各个地方。</p><h4 id="2-1-字符"><a href="#2-1-字符" class="headerlink" title="2.1 字符"></a>2.1 字符</h4><p>规定字符集必须包括英语所以的大写和小写字母，数字0到9，以及下面这些符号：</p><p><img src="images/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="字符"></p><p>换行符用于标志源代码每一行的结束，也用于标志每个输入行的末尾，也可以是一串字符（被作为单个字符处理）</p><p><strong>三字母词</strong>：几个字符的序列合起来表示另一个字符。（可在缺少一些必需字符的字符集上实现）</p><p><img src="images/%E4%B8%89%E5%AD%97%E6%AF%8D%E8%AF%8D.png" alt="三字母词"></p><p>两个问号开头再尾随一个字符一般不会出现在其他表达形式中，所以把三字母词用这种形式来表示，这样就不致引起误解。</p><p><img src="images/%E8%AD%A6%E5%91%8A.png" alt="警告"></p><p><strong>转义序列</strong>或<strong>字符转义</strong>：解决无法再字符串常量内部包含某些字符的问题。</p><p>? 在书写连续多个问号时使用，防止它们被解释为三字母词；</p><p>\“ 用于表示一个字符串常量内部的双引号；</p><p>\‘ 用于表示字符串常量 ’；</p><p>\\ 用于表示一个反斜杠，防止它被解释为一个转义序列符。</p><p>转义符列举：</p><p><img src="images/%E8%BD%AC%E4%B9%89%E7%AC%A6.png" alt="转义符"></p><h4 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h4><p>C语言的注释以字符/*开始，以字符 */结束。</p><p>一个注释可以跨多行但是不能嵌套。注释会被预处理器拿掉，取而代之的是一个空格。</p><h4 id="2-3-标识符"><a href="#2-3-标识符" class="headerlink" title="2.3 标识符"></a>2.3 标识符</h4><p>标识符就是变量，函数，类型等的名字。它们由大小写字母，数字和下划线组成，但不能以数字开头，同时对大小写敏感，无长度限制（但标准允许编译器忽略第31个字符以后的字符）。</p><p>C语言<strong>关键字</strong>是被保留的，不能作为标识符使用：</p><p><img src="images/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"></p><h4 id="2-5-程序的形式"><a href="#2-5-程序的形式" class="headerlink" title="2.5 程序的形式"></a>2.5 程序的形式</h4><p>一个C程序可能保存于一个或多个源文件中，每个函数都必须完整地出现于同一个源文件中。</p><h3 id="3-程序风格"><a href="#3-程序风格" class="headerlink" title="3.程序风格"></a>3.程序风格</h3><p>不良的风格和不良的文档是软件生产和维护代价高昂的两个重要原因。良好的编程风格能够大大提高程序的可读性，直接结果就是程序更容易正确运行，间接结果是它们更容易维护，这将节省大笔资金成本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言的加深--《C和指针》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/27/hello-world/"/>
      <url>2021/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
